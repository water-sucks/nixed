#!/usr/bin/env bash

# A stripped-down, modified version of nerdfetch
# that fits in with the darkrose colorscheme.
# This is much faster and only works for bash
# and zsh, the only shells I use on these systems.

## OS/KERNEL DETECTION

ostype="$(uname)"

kernel="$(uname -sr | cut -d'-' -f1-3)"
case $ostype in
"Linux"*)
  host="$(cat /proc/sys/kernel/hostname)"
  . /etc/os-release
  os="$PRETTY_NAME"
  ;;
"Darwin"*)
  host="$(hostname -f)"
  while IFS='<>' read -r _ _ line _; do
    case $line in
    ProductVersion)
      IFS='<>' read -r _ _ mac_version _
      break
      ;;
    esac
  done </System/Library/CoreServices/SystemVersion.plist
  os="macOS $mac_version"
  ;;
*)
  os="Idk"
  host="host"
  ;;
esac

## UPTIME DETECTION

case $ostype in
"Linux")
  IFS=. read -r s _ </proc/uptime
  ;;
*)
  s=$(sysctl -n kern.boottime)
  s=${s#*=}
  s=${s%,*}
  s=$(($(date +%s) - s))
  ;;
esac
d="$((s / 60 / 60 / 24))"
h="$((s / 60 / 60 % 24))"
m="$((s / 60 % 60))"
# Plurals
[ "$d" -gt 1 ] && dp=s
[ "$h" -gt 1 ] && hp=s
[ "$m" -gt 1 ] && mp=s
[ "$s" -gt 1 ] && sp=s
# Hide empty fields.
[ "$d" = 0 ] && d=
[ "$h" = 0 ] && h=
[ "$m" = 0 ] && m=
[ "$m" != "" ] && s=
# Make the output of uptime smaller.
[ "$d" ] && uptime="$d day$dp, "
[ "$h" ] && uptime="$uptime$h hour$hp, "
[ "$m" ] && uptime="$uptime$m min$mp"
[ "$s" ] && uptime="$uptime$s sec$sp"
uptime=${uptime%, }

## SHELL DETECTION

shell="$(basename "$SHELL")"

case $shell in
"zsh")
  shell="$(zsh --version | cut -d" " -f1-2)"
  ;;
"bash")
  shell="bash $BASH_VERSION"
  ;;
esac

## RAM DETECTION

case $ostype in
"Linux")
  while IFS=':k ' read -r key val _; do
    case $key in
    MemTotal)
      mem_used=$((mem_used + val))
      mem_full=$val
      ;;
    Shmem) mem_used=$((mem_used + val)) ;;
    MemFree | Buffers | Cached | SReclaimable) mem_used=$((mem_used - val)) ;;
    esac
  done </proc/meminfo
  mem_used=$((mem_used / 1024))
  mem_full=$((mem_full / 1024))
  ;;
"Darwin"*)
  mem_full=$(($(sysctl -n hw.memsize) / 1024 / 1024))
  while IFS=:. read -r key val; do
    case $key in
    *' wired'* | *' active'* | *' occupied'*)
      mem_used=$((mem_used + ${val:-0}))
      ;;
    esac
  done <<-EOF
  "$(vm_stat)"
EOF
  mem_used=$((mem_used * 4 / 1024))
  ;;
*)
  mem_full="idk"
  mem_used="idk"
  ;;
esac
memstat="$mem_used/$mem_full MB"
if which expr >/dev/null 2>&1; then
  mempercent="($(expr "$(expr "$mem_used" \* 100 / "$mem_full")")%)"
fi

## COLORS

red='[38;5;124m'
brightred='[38;5;196m'
orange='[38;5;202m'
purple='[38;5;125m'
white='[38;5;250m'
grey='[38;5;238m'
reset='[0m'

rc="$reset$red"
brc="$reset$brightred"
mc="$reset$purple"
gc="$reset$grey"
wc="$reset$white"
oc="$reset$orange"

## OUTPUT

case $ostype in
"Linux")
  cat <<EOF
${gc}      ___
${gc}     (${wc}.. ${gc}\    ${oc}${USER}${grey}@${reset}${mc}${host}${reset}
${gc}     (${oc}<> ${gc}|    ${rc}ï…¼ - ${red}OS: ${wc}${os}${reset}
${gc}    /${wc}/  \\ ${gc}\\   ${rc}îˆº - ${red}Kernel: ${wc}${kernel}${reset}
${gc}   ( ${wc}|  | ${gc}/|  ${rc}ï™µ - ${red}Uptime: ${wc}${uptime}${reset}
${oc}  _${gc}/\\ ${wc}__)${gc}/${oc}_${gc})  ${rc}îž• - ${red}Shell: ${wc}${shell}${reset}
${oc}  \/${gc}-____${oc}\/${reset}   ${rc}ï¡š - ${red}Memory: ${wc}${RAM}${memstat} ${mempercent}
EOF
  ;;
"Darwin")
  cat <<EOF
${gc}       .:\'
${mc}    _ ${gc}:\'${mc}_     ${oc}${USER}${grey}@${reset}${mc}${host}${reset}
${brc} .'\`_\`-'_\`\`.   ${rc}ï…¼ - OS: ${wc}${os}${reset}
${brc}:________.-\'  ${rc}îˆº - Kernel: ${wc}${kernel}${reset}
${oc}:_______:      ${rc}ï™µ - Uptime: ${wc}${uptime}${reset}
${brc} :_______\`-\;  ${rc}îž• - Shell: ${wc}${shell}${reset}
${mc}  \`._.-._.\'   ${rc}ï¡š - Memory: ${wc}${RAM}${memstat} ${mempercent}
EOF
  ;;
esac
