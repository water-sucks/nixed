#!/usr/bin/env bash
# shellcheck disable=2005

# shellcheck disable=2251 # Disables annoying check for skipping errexit

# Fetch all inputs specified in all Fetch.hs files.

set -euo pipefail
set -o noclobber
shopt -s globstar

root="$(git rev-parse --show-toplevel)"

help() {
  cat <<EOF
Usage: nvfetch [options]

Options:
    -c, --continue-on-fail: Continue fetching other files' inputs if one fails
    -i, --interactive:      Press key to start fetching for each file
    -k, --keyfile           Keyfile to pass to nvchecker
    -h, --help:             Show this help menu
EOF
}

cd_to_root() {
  cd "$root" || exit 2
}

confirm() {
  read -n 1 -s -r -p "Press any key to start: "
  echo ""
}

! getopt --test >/dev/null
if [[ ${PIPESTATUS[0]} -ne 4 ]]; then
  echo "error: getopt --test failed in this environment"
  exit 1
fi

LONGOPTS=help,interactive,continue-on-fail,keyfile:
OPTIONS=hick:

! PARSED=$(getopt --options="$OPTIONS" --longoptions="$LONGOPTS" --name "$0" -- "$@")
if [[ ${PIPESTATUS[0]} -ne 0 ]]; then
  exit 2
fi

eval set -- "$PARSED"

continue=false
interactive=false

while true; do
  case "$1" in
  -h | --help)
    help
    exit 0
    ;;
  -i | --interactive)
    interactive=true
    shift
    ;;
  -c | --continue-on-fail)
    continue=true
    shift
    ;;
  -k | --keyfile)
    keyfile="$(readlink -f "$2")"
    shift 2
    ;;
  --)
    shift
    break
    ;;
  *)
    echo "error: invalid state"
    exit 3
    ;;
  esac
done

cd_to_root

for file in **/Fetch.hs; do
  cd "$root/$(dirname "$file")" || exit 2

  if "$interactive"; then
    echo "Now fetching for $file..."
    confirm
  fi

  cmd="runghc $(basename "$file") ${keyfile+"-k $keyfile"}"

  if ! eval "$cmd"; then
    printf "error: unable to run nvfetcher in %s\n\n" "$(dirname "$file")"

    if ! "$continue"; then
      exit 1
    fi
  fi
done

echo "Formatting generated Nix files..."

cd_to_root

alejandra -q ./**/_sources/generated.nix
prettier -w ./**/_sources/generated.json
